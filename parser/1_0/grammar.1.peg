{
    const path= require('path');
    const applicationRoot = path.resolve('.') ;
    const astSourcePath = applicationRoot + '/parser/1_0/ast.js' ;
    const { join, flatten } = require(astSourcePath)
}

OrOperation
  = lhs:AndOperation bit:OrBit bits:OrBit+ { return join(lhs,[bit].concat(bits)) }
  / lhs:AndOperation bit:OrBit { return{lhs, op: bit.op, rhs:bit.rhs} }
  / lhs:AndOperation {
      if (!(lhs.rhs) && lhs.variable) {
         return{variable: lhs.variable}
      } else if (!(lhs.rhs) && lhs.lhs) {
         return flatten("lhs")(lhs)
      } else {
         return{lhs}
      }
    }

OrBit
 =  op:Or rhs:AndOperation { return {op, rhs} }

AndOperation
  = lhs:OrOperationOrVariable bit:AndBit bits:AndBit+ { return{lhs, [bit].concat(bits)} }
  / lhs:OrOperationOrVariable bit:AndBit { return{lhs, op: bit.op, rhs:bit.rhs} }
  / lhs:OrOperationOrVariable {
      if (!(lhs.rhs) && lhs.variable) {
         return{variable: lhs.variable}
      } else if (!(lhs.rhs) && lhs.lhs) {
         return flatten("lhs")(lhs)
      } else {
         return{lhs}
      }
    }

AndBit
 = op:And rhs:OrOperationOrVariable { return {op, rhs} }

OrOperationOrVariable
  = "(" Space or:OrOperation Space ")" { return or; }
  / Variable

And
 = Space? op:"and" Space? { return op }
 / "and"

Or
 = Space? op:"or" Space? { return op }
 / "or"

Variable
  = v:Character  { return {variable: v} }

Character
  = ([A-Z]/[a-z])

Space "whitespace"
  = [ \t\n\r]*